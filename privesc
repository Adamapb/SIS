#!/bin/bash

# Check if "passfile" exists
if [ ! -f "/home/ncraf/castleexploits/passfile" ]; then
    exit 0
fi

# Get the target IP from the first argument
TARGET_IP="$1"

if [ -z "$TARGET_IP" ]; then
    echo "Usage: $0 <target_ip>"
    exit 1
fi

# Credentials
USERNAME="cindy"
PASSWORD="D1r3ct0rIT"

# Retrieve SNAPSHOTUPTIME value from the target host using expect
SNAPSHOT_UPTIME_OUTPUT=$(expect << EOF
set timeout -1
spawn ssh -o StrictHostKeyChecking=no $USERNAME@$TARGET_IP "cat /var/run/SNAPSHOTUPTIME"
expect "password:"
send "$PASSWORD\r"
expect eof
EOF
)

# Debug: Output the raw content of SNAPSHOT_UPTIME_OUTPUT
echo "Raw SNAPSHOT_UPTIME_OUTPUT:"
echo "$SNAPSHOT_UPTIME_OUTPUT"

# Extract only the numeric lines and ignore everything else
CLEANED_OUTPUT=$(echo "$SNAPSHOT_UPTIME_OUTPUT" | sed -n 's/[^0-9]*\([0-9]\+\)[^0-9]*/\1/p')

# Debug: Output the cleaned content
echo "Cleaned SNAPSHOT_UPTIME_OUTPUT:"
echo "$CLEANED_OUTPUT"

# Verify that the value is a valid number
if ! [[ "$CLEANED_OUTPUT" =~ ^[0-9]+$ ]]; then
    echo "Error: /var/run/SNAPSHOTUPTIME on the target host does not contain a valid number."
    exit 1
fi

# Assign the cleaned output to SNAPSHOT_UPTIME_MINUTES
SNAPSHOT_UPTIME_MINUTES="$CLEANED_OUTPUT"

# Convert snapshot uptime to seconds
SNAPSHOT_UPTIME_SECONDS=$((SNAPSHOT_UPTIME_MINUTES * 60))

# Get the time since modification of passfile in seconds
CURRENT_TIME=$(date +%s)
PASSFILE_MOD_TIME=$(stat -c %Y /home/ncraf/castleexploits/passfile)
FILE_UPTIME_SECONDS=$((CURRENT_TIME - PASSFILE_MOD_TIME))

# Compare file uptime and snapshot uptime
if [ "$FILE_UPTIME_SECONDS" -gt "$SNAPSHOT_UPTIME_SECONDS" ]; then
    echo "Error: Time since passfile modification ($FILE_UPTIME_SECONDS s) exceeds SNAPSHOTUPTIME ($SNAPSHOT_UPTIME_SECONDS s) on the target host."
    exit 1
fi

# Navigate to the counter directory
COUNTER_DIR="/home/ncraf/castleexploits"
cd "$COUNTER_DIR"

# Check for a 5-digit numeric filename (60000-61000)
counter=$(ls | grep -E '^[0-9]{5}$' | head -n 1)

# If the counter file doesn't exist or doesn't match a 5-digit number, start at 60000
if ! [[ $counter =~ ^[0-9]{5}$ ]]; then
    counter=60000
    touch $counter
fi

# SSH to the target system and start the Python HTTP server
expect << EOF
set timeout -1
spawn ssh -o StrictHostKeyChecking=no $USERNAME@$TARGET_IP
expect "password:"
send "$PASSWORD\r"
expect "\$ "
send "cd /home/cindy/Documents && nohup python3 -m http.server $counter >/dev/null 2>&1 &\r"
send "exit\r"
expect eof
EOF

# Increment the counter
newPort=$((counter + 1))

# Update the counter file
touch $newPort
rm $counter
